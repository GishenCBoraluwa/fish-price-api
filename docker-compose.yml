version: '3.8'

services:
  fish-price-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"  # Keep original port for price prediction
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - API_TITLE=Fish Price Prediction API
      - API_VERSION=1.0.0
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=2
      - RATE_LIMIT_PER_MINUTE=60
      - SECRET_KEY=${SECRET_KEY:secret-key-change-in-production}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
        reservations:
          cpus: '0.4'
          memory: 512M
    networks:
      - price-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"  # Keep original Redis port for price prediction
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
    networks:
      - price-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"   # HTTP for price prediction
      - "443:443" # HTTPS for price prediction
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      fish-price-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    networks:
      - price-network

volumes:
  redis_data:

networks:
  price-network:
    driver: bridge